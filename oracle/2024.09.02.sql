-- DEPT_COPY 테이블 생성하기
CREATE TABLE DEPT_COPY
    AS SELECT *
        FROM DEPT
        WHERE 0 = 1;
        
-- ACCOUNTING 부서의 정보 입력하기
INSERT INTO DEPT_COPY
VALUES (10, 'ACCOUNTING', 'NEW YORK');

-- DEPT_COPY 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY;

--  RESEARCH 부서의 정보 입력하기
INSERT INTO DEPT_COPY (DEPTNO, LOC, DNAME)
VALUES (20, 'DALLAS', 'RESEARCH');

-- DEPT_COPY 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY;

-- 암시적으로 NULL 값 삽입하기
INSERT INTO DEPT_COPY (DEPTNO, DNAME)
VALUES (30, 'SALES');

-- DEPT_COPY 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY;

-- 명시적으로 NULL 값 삽입하기
INSERT INTO DEPT_COPY
VALUES (40, 'OPERATIONS', NULL);

-- DEPT_COPY 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY;

-- 공백문자 삽입하기
INSERT INTO DEPT_COPY
VALUES (50, 'COMPUTING', '');

-- DEPT_COPY 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY;

-- EMP_COPY 생성하기
CREATE TABLE EMP_COPY
    AS SELECT EMPNO, ENAME, JOB, HIREDATE, DEPTNO
        FROM EMP
        WHERE 0 = 1;

-- EMP_COPY 테이블의 전체 열 조회하기
SELECT *
FROM EMP_COPY;

-- 날짜 데이터 입력하기
INSERT INTO EMP_COPY
VALUES (7000, 'CANDY', 'MANAGER', '2024/09/02', 10);

-- EMP_COPY 테이블의 전체 열 조회하기
SELECT *
FROM EMP_COPY;

-- TO_DATE 함수로 날짜 데이터 입력하기
INSERT INTO EMP_COPY 
VALUES (7010, 'TOM', 'MANAGER',TO_DATE('2024,09,02','YYYY,MM,DD'),20);

-- EMP_COPY 테이블의 전체 열 조회하기
SELECT *
FROM EMP_COPY;

-- SYSDATE 함수로 현재 날짜 입력하기
INSERT INTO EMP_COPY
VALUES (7020, 'JERRY', 'SALESMAN', SYSDATE, 30);

-- EMP_COPY 테이블의 전체 열 조회하기
SELECT *
FROM EMP_COPY;

-- DEPT_COPY2 테이블 생성하기
CREATE TABLE DEPT_COPY2
    AS SELECT *
        FROM DEPT
        WHERE 0 = 1;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- 서브 쿼리로 다중 행 입력하기
INSERT INTO DEPT_COPY2
SELECT * FROM DEPT;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- WHERE절로 특정 로우만 수정하기
UPDATE DEPT_COPY2
SET DNAME = 'PROGRAMMING'
WHERE DEPTNO = 10;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- WHERE 절을 생략하여 모든 로우 수정하기
UPDATE DEPT_COPY2
SET DNAME = 'HR';

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- 컬럼 값 여러 개를 한 번에 수정하기
UPDATE DEPT_COPY2
SET DNAME='PROGRAMMING', LOC = 'SEOUL'
WHERE DEPTNO = 10;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- 10번 부서의 지역명을 20번 부서의 지역명으로 변경하기
UPDATE DEPT_COPY2
SET LOC = (
    SELECT LOC
    FROM DEPT_COPY2
    WHERE DEPTNO = 20
)
WHERE DEPTNO = 10;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- 10번 부서의 부서명과 지역명을 30번 부서의 부서명과 지역명으로 변경하기
UPDATE DEPT_COPY2
SET DNAME = (
        SELECT DNAME
        FROM DEPT_COPY2
        WHERE DEPTNO = 30
    ),
    LOC = (
        SELECT LOC
        FROM DEPT_COPY2
        WHERE DEPTNO = 30
    )
WHERE DEPTNO = 10;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- WHERE 절로 특정 로우만 삭제하기
DELETE DEPT_COPY2
WHERE DEPTNO = 10;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

-- WHERE 절을 생략하여 모든 로우 삭제하기
DELETE DEPT_COPY2;

-- DEPT_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY2;

COMMIT;

-- EMP_COPY2 테이블 생성하기
CREATE TABLE EMP_COPY2
    AS SELECT * FROM EMP;

-- EMP_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM EMP_COPY2;

-- 사원들 중 영업부에 근무하는 사원 삭제하기
SELECT *
FROM DEPT;

SELECT DEPTNO
FROM DEPT
WHERE DNAME = 'SALES';

DELETE EMP_COPY2
WHERE DEPTNO = (
    SELECT DEPTNO
    FROM DEPT
    WHERE DNAME = 'SALES'
);

-- EMP_COPY2 테이블의 전체 열 조회하기
SELECT *
FROM EMP_COPY2;

COMMIT;

-- DEPT_COPY3 테이블 생성하기
CREATE TABLE DEPT_COPY3
    AS SELECT * FROM DEPT;

-- DEPT_COPY3 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY3;

-- 10번 부서만 삭제하려고 했느데 모든 내용을 삭제하기
DELETE DEPT_COPY3;

-- DEPT_COPY3 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY3;

-- 이전 상태로 되돌리기
ROLLBACK;

-- DEPT_COPY3 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY3;

-- 10번 부서만 삭제하기
DELETE DEPT_COPY3
WHERE DEPTNO = 10;

-- DEPT_COPY3 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY3;

--영구 삭제하기
COMMIT;

-- 이전 상태로 되돌리기
ROLLBACK;

-- DEPT_COPY3 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_COPY3;

-- 서브 쿼리문으로 부서 테이블의 구조와 데이터 복사하기
CREATE TABLE DEPT_SECOND
    AS SELECT * FROM DEPT;

-- DEPT_SECOND 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_SECOND;

-- 20번 부서 소속 사원에 대한 정보를 포함한 DEPT20 테이블 생성
CREATE TABLE DEPT20
    AS SELECT EMPNO, ENAME, SAL * 12 ANNSAL
        FROM EMP
        WHERE DEPTNO = 20; 

-- DEPT20 테이블의 전체 열 조회하기
SELECT *
FROM DEPT20;

-- 20번 부서 소속 사원에 대한 정보를 포함한 DEPT20_ERR 테이블 생성
CREATE TABLE DEPT20_ERR
    AS SELECT EMPNO, ENAME, SAL * 12
        FROM EMP
        WHERE DEPTNO = 20; 
        
-- 부서 테이블을 구조만 복사하기
CREATE TABLE DEPT_THIRD
    AS SELECT DEPTNO, DNAME
        FROM DEPT
        WHERE 0 = 1;

-- DEPT_THIRD 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_THIRD;

-- DEPT_THIRD 테이블의 구조 확인하기
DESC DEPT_THIRD;

-- DEPT20 테이블에 날짜 타입을 가지는 BIRTH 컬럼 추가하기
ALTER TABLE DEPT20
ADD(BIRTH DATE);

-- DEPT20 테이블의 구조 확인하기
DESC DEPT20;

-- DEPT20 테이블의 전체 열 조회하기
SELECT *
FROM DEPT20;    

-- 사원 이름 컬럼 크기 변경하기(10->30)
ALTER TABLE DEPT20
MODIFY ENAME VARCHAR2(30);

-- DEPT20 테이블의 구조 확인하기
DESC DEPT20;

-- DEPT20 테이블에서 사원이름 컬럼 제거
ALTER TABLE DEPT20
DROP COLUMN ENAME;

-- DEPT20 테이블의 구조 확인하기
DESC DEPT20;

-- 테이블명 변경하기
RENAME DEPT20 TO EMP20;

-- DEPT20 테이블의 구조 확인하기
DESC DEPT20;

-- EMP20 테이블의 구조 확인하기
DESC EMP20;

-- EMP20 테이블 제거하기
DROP TABLE EMP20;

-- EMP20 테이블의 구조 확인하기
DESC EMP20;

-- DEPT_SECOND 테이블의 모든 데이터 제거하기
TRUNCATE TABLE DEPT_SECOND;

-- DEPT_SECOND 테이블의 전체 열 조회하기
SELECT *
FROM DEPT_SECOND;    

-- DEPT_SECOND 테이블의 구조 확인하기
DESC DEPT_SECOND;

-- DEPT_SECOND 테이블 삭제하기
DROP TABLE DEPT_SECOND;

-- 컬럼 레벨에서 제약조건 정의하기
CREATE TABLE DEPT_SECOND(
    DEPTNO NUMBER(2) CONSTRAINT PK_DEPT_SECOND PRIMARY KEY,
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13)
);

-- DEPT_SECOND 테이블의 구조 확인하기
DESC DEPT_SECOND;

-- DEPT_THIRD 테이블 삭제하기
DROP TABLE DEPT_THIRD;

-- 테이블 레벨에서 제약조건 정의하기
CREATE TABLE DEPT_THIRD(
    DEPTNO NUMBER(2),
    DNAME VARCHAR2(14),
    LOC VARCHAR2(13),
    CONSTRAINT PK_DEPT_THIRD PRIMARY KEY(DEPTNO)
);

-- DEPT_THIRD 테이블의 구조 확인하기
DESC DEPT_THIRD;

-- NOT NULL 제약 조건 지정하기
CREATE TABLE CUSTOMER (
    ID VARCHAR2(20) NOT NULL,
    PWD VARCHAR2(20) NOT NULL,
    NAME VARCHAR2(20) NOT NULL,
    PHONE VARCHAR2(30),
    ADDRESS VARCHAR2(100)
);

-- CUSTOMER 테이블에 NULL 데이터 추가하기
INSERT INTO CUSTOMER
VALUES (NULL, NULL, NULL, '010-1111-1111','SEOUL');

-- CUSTOMER 테이블에 데이터 입력하기
INSERT INTO CUSTOMER
VALUES ('GREENTEA', '1234', '녹차아가씨', '010-1111-1111', 'SEOUL');

-- CUSTOMER 테이블에 데이터 입력하기
INSERT INTO CUSTOMER
VALUES ('GREENTEA', '11223344', '그린티', '010-2222-2222', 'SEOUL');

-- CUSTOMER 테이블의 전체 열 조회하기
SELECT *
FROM CUSTOMER;

-- CUSTOMER 테이블 삭제하기
DROP TABLE CUSTOMER;

-- UNIQUE 제약 조건 지정하기
CREATE TABLE CUSTOMER (
    ID VARCHAR2(20) UNIQUE,
    PWD VARCHAR2(20) NOT NULL,
    NAME VARCHAR2(20) NOT NULL,
    PHONE VARCHAR2(30),
    ADDRESS VARCHAR2(100)
);

-- CUSTOMER 테이블에 데이터 입력하기
INSERT INTO CUSTOMER
VALUES ('GREENTEA', '1234', '녹차아가씨', '010-1111-1111', 'SEOUL');

-- CUSTOMER 테이블에 데이터 입력하기
INSERT INTO CUSTOMER
VALUES ('GREENTEA', '11223344', '그린티', '010-2222-2222', 'SEOUL');

-- CUSTOMER 테이블에 NULL 입력하기
INSERT INTO CUSTOMER
VALUES (NULL, '11223344', '그린티', '010-2222-2222', 'SEOUL');

-- CUSTOMER 테이블의 전체 열 조회하기
SELECT *
FROM CUSTOMER;

-- CUSTOMER 테이블 삭제하기
DROP TABLE CUSTOMER;

-- 제약 조건 이름 지정하기
CREATE TABLE CUSTOMER (
    ID VARCHAR2(20) CONSTRAINT CUSTOMER_ID_UK UNIQUE,
    PWD VARCHAR2(20) CONSTRAINT CUSTOMER_PWD_NN NOT NULL,
    NAME VARCHAR2(20) CONSTRAINT CUSTOMER_NAME_NN NOT NULL,
    PHONE VARCHAR2(30),
    ADDRESS VARCHAR2(100)
);

-- 제약 조건 확인하기
SELECT TABLE_NAME, CONSTRAINT_NAME
FROM USER_CONSTRAINTS
WHERE TABLE_NAME IN('CUSTOMER');

-- CUSTOMER 테이블 삭제하기
DROP TABLE CUSTOMER;

--PRIMARY KEY 제약 조건 지정하기
CREATE TABLE CUSTOMER (
    ID VARCHAR2(20),
    PWD VARCHAR2(20) CONSTRAINT CUSTOMER_PWD_NN NOT NULL,
    NAME VARCHAR2(20) CONSTRAINT CUSTOMER_NAME_NN NOT NULL,
    PHONE VARCHAR2(30),
    ADDRESS VARCHAR2(100),
    CONSTRAINT CUSTOMER_ID_PK PRIMARY KEY(ID)
);

-- CUSTOMER 테이블에 데이터 입력하기
INSERT INTO CUSTOMER
VALUES ('GREENTEA', '1234', '녹차아가씨', '010-1111-1111', 'SEOUL');

-- CUSTOMER 테이블에 데이터 입력하기
INSERT INTO CUSTOMER
VALUES ('GREENTEA', '11223344', '그린티', '010-2222-2222', 'SEOUL');

-- CUSTOMER 테이블에 NULL 입력하기
INSERT INTO CUSTOMER
VALUES (NULL, '11223344', '그린티', '010-2222-2222', 'SEOUL');

-- DEPT 테이블의 전체 열 조회하기
SELECT *
FROM DEPT;

-- EMP 테이블에 50번 부서의 사원을 추가하기
INSERT INTO EMP (EMPNO, ENAME, DEPTNO)
VALUES (5000, '라이언', 50);

-- FOREIGN KEY 제약 조건 지정하기
CREATE TABLE EMP_SECOND(
    EMPNO NUMBER(4) CONSTRAINT EMP_SECOND_EMPNO_PK PRIMARY KEY,
    ENAME VARCHAR2(10),
    JOB VARCHAR2(9),
    DEPTNO NUMBER(2) CONSTRAINT EMP_SECOND_DEPTNO_FK REFERENCES DEPT
);

-- 참조 무결성 확인하기
INSERT INTO EMP_SECOND
VALUES (8000, '무지', 'MANAGER', 50);


-- CHECK 제약 조건 지정하기
CREATE TABLE EMP_THIRD(
    EMPNO NUMBER(4) CONSTRAINT EMP_THIRD_EMPNO_PK PRIMARY KEY,
    ENAME VARCHAR2(10),
    SAL NUMBER(7,2) CONSTRAINT EMP_THIRD_SAL_MIN CHECK (SAL > 0)
);

-- CHECK 제약 조건 확인하기
INSERT INTO EMP_THIRD
VALUES (9000, '춘식이', 0);


-- EMP_THIRD 테이블 삭제하기
DROP TABLE EMP_THIRD;

-- DEFAULT 제약 조건 지정하기
CREATE TABLE EMP_THIRD(
    EMPNO NUMBER(4) CONSTRAINT EMP_THIRD_EMPNO_PK PRIMARY KEY,
    ENAME VARCHAR2(10),
    SAL NUMBER(7,2) DEFAULT 1000
);

-- DEFAULT 제약 조건 확인하기
INSERT INTO EMP_THIRD(EMPNO, ENAME)
VALUES (9000, '라이언');

-- EMP_THIRD 테이블의 전체 열 조회하기
SELECT *
FROM EMP_THIRD;


--Q1.
select * from emp where sal >= 1500;

SELECT *
FROM EMP
WHERE SAL >= 1500;

SELECT *
FROM EMP
WHERE SAL >= 1500
ORDER BY EMPNO;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE SAL >= 1500;

SELECT *
FROM EMP E
WHERE EXISTS (
    SELECT *
    FROM EMP
    WHERE SAL >= 1500
    AND E.EMPNO = EMP.EMPNO
);

SELECT *
FROM EMP
MINUS          
SELECT*
FROM EMP
WHERE SAL <1500;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP, SALGRADE
WHERE SAL BETWEEN LOSAL AND HISAL
    AND SAL >= 1500
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE NOT SAL < 1500;

SELECT *
FROM EMP
WHERE NOT(SAL < 1500);

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/DD/MM') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE SAL >= 1500;

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/DD/MM') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
MINUS
SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/DD/MM') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE SAL < 1500;

SELECT *
FROM EMP
WHERE SAL > 1500
UNION
SELECT *
FROM EMP
WHERE SAL = 1500;

SELECT *
FROM EMP
WHERE SAL IN (SELECT SAL FROM EMP WHERE SAL >= 1500);

-- Q2.
select * from emp where deptno =10;

SELECT *
FROM EMP
WHERE DEPTNO = 10;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE DEPTNO = 10;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE DEPTNO = 10
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE DEPTNO = 10
ORDER BY EMPNO;

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE DEPTNO <> 10;

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE NOT DEPTNO = 10;

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE DEPTNO = 20
MINUS
SELECT *
FROM EMP
WHERE DEPTNO = 30;

SELECT *
FROM EMP
WHERE DEPTNO != 20
    AND NOT DEPTNO =30;
    
SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE DEPTNO = 20
 OR DEPTNO = 30;

SELECT *
FROM EMP
WHERE deptno = 10;

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/MM/DD') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE DEPTNO = 10
ORDER BY EMPNO;

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/MM/DD') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
MINUS
SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/MM/DD') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE DEPTNO <> 10
ORDER BY EMPNO;

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE DEPTNO ^= 10;

-- Q3.
SELECT *
FROM EMP
WHERE ENAME = 'SCOTT';

select * from emp where ename = 'SCOTT';

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE ENAME = 'SCOTT';

SELECT *
FROM EMP
MINUS
SELECT*
FROM EMP
WHERE ENAME ^= 'SCOTT';

SELECT *
FROM EMP
WHERE UPPER(ENAME) = UPPER('scott');

SELECT *
FROM EMP
WHERE SUBSTR(ENAME, 1,5) ='SCOTT';

SELECT *
FROM EMP
WHERE ENAME LIKE 'S%'
    AND ENAME LIKE '_C%'
    AND ENAME LIKE '__O%'
    AND ENAME LIKE '___T%'
    AND ENAME LIKE '____T';

SELECT *
FROM EMP
INTERSECT
SELECT *
FROM EMP
WHERE ENAME = 'SCOTT';


-- Q4.
SELECT *
FROM EMP
WHERE HIREDATE <= TO_DATE('1981/01/01', 'YYYY/MM/DD');

SELECT *
FROM EMP
WHERE HIREDATE <= '81/01/01';

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YY/MM/DD') AS HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE HIREDATE <= TO_DATE('1981-01-01', 'YYYY-MM-DD');

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE HIREDATE <= '1981/01/01';

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE HIREDATE <= TO_DATE('1981/01/01', 'YYYY/MM/DD');

SELECT *
FROM EMP
WHERE HIREDATE <= TO_DATE('1981-01-01', 'YYYY-MM-DD');

SELECT *
FROM EMP
WHERE HIREDATE <= TO_DATE('19810101', 'YYYYMMDD');

select * from emp where hiredate <= '81/01/01';
select * from emp where hiredate <= to_date('1981-01-01','YYYY-MM-DD');

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE HIREDATE > '81/01/01';

SELECT *
FROM EMP
WHERE NOT HIREDATE > '1981/01/01';


SELECT *
FROM EMP E
WHERE EXISTS (
    SELECT *
    FROM EMP
    WHERE HIREDATE <= '1981/01/01'
    AND E.EMPNO = EMP.EMPNO
);

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE HIREDATE >= '1981/01/02';

SELECT *
FROM EMP
WHERE HIREDATE <= '1981-01-01';

SELECT *
FROM EMP
WHERE HIREDATE <= TO_DATE('1981-01-01', 'YYYY-MM-DD');

-- Q5.

select * from emp where deptno = 10 and job = 'MANAGER';

SELECT *
FROM EMP
WHERE DEPTNO = 10 
    AND JOB = 'MANAGER';
    
SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE DEPTNO = 10 AND JOB = 'MANAGER';

SELECT *
FROM EMP
WHERE DEPTNO = 10
INTERSECT
SELECT *
FROM EMP
WHERE JOB = 'MANAGER';

select * from emp where deptno = 10
intersect
select * from emp where job = 'MANAGER';

-- Q6.

SELECT *
FROM EMP
WHERE DEPTNO = 10
    OR JOB = 'MANAGER';
    
SELECT *
FROM EMP
WHERE DEPTNO = 10
UNION
SELECT *
FROM EMP
WHERE JOB = 'MANAGER';    
    
select * from emp where deptno = 10 or job = 'MANAGER';

select * from emp where deptno = 10
union
select * from emp where job = 'MANAGER';

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE DEPTNO = 10 OR JOB = 'MANAGER';

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE DEPTNO = 10 OR JOB = 'MANAGER'
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE DEPTNO = 10
OR JOB = 'MANAGER'
ORDER BY EMPNO;

-- Q7.
select * from emp where deptno != 10;
select * from emp where deptno <> 10;
select * from emp where deptno ^= 10;
select * from emp where not deptno = 10;

SELECT *
FROM EMP
WHERE DEPTNO != 10;

SELECT *
FROM EMP
WHERE DEPTNO <> 10;

SELECT *
FROM EMP
WHERE DEPTNO ^= 10;

SELECT *
FROM EMP
WHERE NOT DEPTNO = 10;

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE DEPTNO = 10;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE DEPTNO != 10;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE DEPTNO != 10
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE DEPTNO IN (20,30);

SELECT *
FROM EMP
WHERE NOT (DEPTNO = 10);

SELECT *
FROM EMP
WHERE DEPTNO IS NOT NULL 
MINUS
SELECT *
FROM EMP
WHERE DEPTNO = 10;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP
MINUS
SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE DEPTNO = 10
ORDER BY EMPNO;

-- Q8.
SELECT *
FROM EMP
WHERE SAL BETWEEN 1000 AND 1500;

SELECT *
FROM EMP
WHERE SAL >= 1000
    AND SAL <=1500;
    
SELECT *
FROM EMP
WHERE SAL >= 1000 AND SAL <=1500
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE SAL BETWEEN 1000 AND 1500
ORDER BY EMPNO;

select * from emp where sal between 1000 and 1500;
select * from emp where sal >= 1000 and sal <= 1500;
select * from (select * from emp where sal >= 1000) where sal <= 1500;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE SAL BETWEEN 1000 AND 1500;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE SAL >= 1000 AND SAL <= 1500;

SELECT *
FROM EMP
WHERE SAL>=1000
INTERSECT
SELECT *
FROM EMP
WHERE SAL<=1500;

SELECT *
FROM EMP
WHERE SAL IN (SELECT SAL
            FROM EMP
            WHERE SAL BETWEEN 1000 AND 1500);

-- Q9.

select * from emp where sal < 1000 or sal > 1500;
select * from emp where sal < 1000
union
select * from emp where sal > 1500;

SELECT *
FROM EMP
WHERE SAL NOT BETWEEN 1000 AND 1500;

SELECT *
FROM EMP
WHERE SAL < 1000
    OR SAL > 1500;

SELECT *
FROM EMP
WHERE SAL < 1000 OR SAL > 1500
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE SAL NOT BETWEEN 1000 AND 1500
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE NOT (SAL >= 1000 AND SAL <= 1500);

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE SAL < 1000 OR SAL > 1500;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE NOT (SAL >= 1000 AND SAL <= 1500);

SELECT *
FROM EMP
MINUS
SELECT *
FROM EMP
WHERE SAL BETWEEN 1000 AND 1500;

SELECT *
FROM EMP
WHERE SAL IN (SELECT SAL
            FROM EMP
            WHERE SAL < 1000 OR SAL > 1500)
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE NOT (SAL BETWEEN 1000 AND 1500);

SELECT *
FROM EMP
WHERE NOT SAL >= 1000
    OR NOT SAL <= 1500;
    
-- Q10.
SELECT *
FROM EMP
WHERE COMM = 300 
    OR COMM = 500 
    OR COMM = 1400;

SELECT *
FROM EMP
WHERE COMM IN (300,500,1400);

select * from emp where comm = 300 or comm = 500 or comm = 1400;

select * from emp where comm in (300,500,1400); 

SELECT *
FROM EMP
WHERE COMM IN (300, 500, 1400)
ORDER BY COMM;

SELECT *
FROM EMP
WHERE COMM = 300 OR COMM = 500 OR COMM = 1400
ORDER BY COMM;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE COMM = 300 OR COMM = 500 OR COMM = 1400;

SELECT EMPNO, ENAME, JOB, MGR, HIREDATE, SAL, COMM, DEPTNO 
FROM EMP
WHERE COMM IN (300, 500, 1400);

SELECT *
FROM EMP
WHERE COMM IN (SELECT COMM
            FROM EMP
            WHERE COMM = 300 OR COMM = 500 OR COMM =1400);

SELECT *
FROM EMP
WHERE COMM = 300
UNION
SELECT *
FROM EMP
WHERE  COMM =500
UNION 
SELECT *
FROM EMP
WHERE COMM=1400;

SELECT *
FROM EMP
WHERE COMM IN (
  SELECT COMM
  FROM EMP
  WHERE COMM IS NOT NULL
  AND COMM > 0
)
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE COMM = ANY (
  SELECT COMM
  FROM EMP
  WHERE COMM IS NOT NULL
  AND COMM > 0
)
ORDER BY EMPNO;

SELECT *
FROM EMP E1
WHERE EXISTS (
  SELECT 1
  FROM EMP E2
  WHERE E1.EMPNO = E2.EMPNO
  AND E2.COMM IS NOT NULL
  AND E2.COMM > 0 
)
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE COMM IN (
    SELECT COMM
    FROM EMP
    WHERE COMM IN (300, 500, 1400)
);

-- 4장 연습문제
-- Q4-2. EMP 테이블의 JOB 열 데이터를 중복없이 출력하기
SELECT DISTINCT JOB
FROM EMP;


-- Q4-3.
-- 1) EMP
-- 2) ALIAS
-- 3) 정렬
SELECT EMPNO AS EMPLOYEE_NO, 
        ENAME AS EMPLOYEE_NAME, 
        JOB,
        MGR AS MANAGER, 
        SAL AS SALARY, 
        COMM AS COMMISION, 
        DEPTNO AS DEPARTMENT_NO
FROM EMP
ORDER BY DEPARTMENT_NO DESC, EMPLOYEE_NAME ASC;

SELECT EMPNO AS EMPLOYEE_NO, 
        ENAME AS EMPLOYEE_NAME, 
        JOB,
        MGR AS MANAGER, 
        SAL AS SALARY, 
        COMM AS COMMISION, 
        DEPTNO AS DEPARTMENT_NO
FROM EMP
ORDER BY DEPARTMENT_NO DESC, EMPLOYEE_NAME;

SELECT EMPNO AS EMPLOYEE_NO, 
        ENAME AS EMPLOYEE_NAME, 
        JOB,
        MGR AS MANAGER, 
        SAL AS SALARY, 
        COMM AS COMMISION, 
        DEPTNO AS DEPARTMENT_NO
FROM EMP
ORDER BY DEPTNO DESC, ENAME;

-- 5장 연습문제
-- Q5-1. EMP 테이블을 사용하여 사원이름(ENAME)이 S로 끝나는 사원 데이터를 모두 출력하기

SELECT * 
FROM EMP
WHERE ENAME LIKE '%S';

SELECT EMPNO, ENAME, JOB ,MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE ENAME  LIKE '%S';

SELECT EMPNO, ENAME, JOB ,MGR, HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE SUBSTR(ENAME, LENGTH(ENAME),1) = 'S';

SELECT *
FROM EMP
WHERE SUBSTR(ENAME,-1)='S';

SELECT *
FROM EMP
WHERE SUBSTR(ENAME, -1,1)='S';

SELECT *
FROM EMP
WHERE ENAME LIKE '%S'
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE LENGTH(ENAME) = INSTR(ENAME, 'S', 1)
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE SUBSTR(ENAME, -1) = 'S'
ORDER BY EMPNO;

SELECT *
FROM EMP
WHERE SUBSTR(ENAME, LENGTH(ENAME), 1) = 'S';

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YYYY/MM/DD') HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE ENAME LIKE '%S';

SELECT EMPNO, ENAME, JOB, MGR, TO_CHAR(HIREDATE, 'YYYY/MM/DD') HIREDATE, SAL, COMM, DEPTNO
FROM EMP
WHERE SUBSTR(ENAME, -1, 1) = 'S';

SELECT *
FROM EMP
WHERE INSTR(REVERSE(ENAME), 'S', 1) = 1;

COMMIT;